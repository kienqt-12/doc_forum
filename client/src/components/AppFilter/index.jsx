import React, { useState } from 'react';
import {
  Box,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  InputAdornment,
  Button,
  Stack,
  Snackbar,
  Alert,
  Chip,
  OutlinedInput,
} from '@mui/material';
import {
  MedicalServices,
  LocationOn,
  Sort,
  Search,
  Add, LocalHospital
} from '@mui/icons-material';
import CreatePostModel from '~/components/CreatePostModel';
import { useAuth } from '../../context/AuthContext';
import useNavigation from '../../hooks/useNavigation';

const specialties = ['T·∫•t c·∫£', 'Tim m·∫°ch',
  "N·ªôi ti·∫øt",
  "Da li·ªÖu",
  "Nhi khoa",
  "S·∫£n ph·ª• khoa",
  "Ngo·∫°i t·ªïng qu√°t",
  "Tai m≈©i h·ªçng",
  "RƒÉng h√†m m·∫∑t",
  "M·∫Øt",
  "T√¢m th·∫ßn"];
const cities = ['T·∫•t c·∫£', 'H√† N·ªôi', 'TP. H·ªì Ch√≠ Minh', 'ƒê√† N·∫µng', 'H·∫£i Ph√≤ng', 'C·∫ßn Th∆°',
  'B√¨nh D∆∞∆°ng', 'ƒê·ªìng Nai', 'Ngh·ªá An', 'Thanh H√≥a', 'Th·ª´a Thi√™n Hu·∫ø'];
const sortOptions = ['M·ªõi nh·∫•t', 'C≈© nh·∫•t'];
const WORKPLACES_BY_CITY = {
  "H√† N·ªôi": [
    "B·ªánh vi·ªán B·∫°ch Mai",
    "B·ªánh vi·ªán H·ªØu ngh·ªã Vi·ªát ƒê·ª©c",
    "B·ªánh vi·ªán K",
    "B·ªánh vi·ªán Ph·ª• s·∫£n Trung ∆∞∆°ng",
    "B·ªánh vi·ªán Qu√¢n y 108",
    "B·ªánh vi·ªán ƒê·∫°i h·ªçc Y H√† N·ªôi",
    "B·ªánh vi·ªán E Trung ∆∞∆°ng"
  ],
  "TP. H·ªì Ch√≠ Minh": [
    "B·ªánh vi·ªán Ch·ª£ R·∫´y",
    "B·ªánh vi·ªán Nhi ƒê·ªìng 1",
    "B·ªánh vi·ªán Nhi ƒê·ªìng 2",
    "B·ªánh vi·ªán T·ª´ D≈©",
    "B·ªánh vi·ªán Nh√¢n d√¢n Gia ƒê·ªãnh",
    "B·ªánh vi·ªán 115"
  ],
  "ƒê√† N·∫µng": [
    "B·ªánh vi·ªán ƒê√† N·∫µng",
    "B·ªánh vi·ªán C ƒê√† N·∫µng",
    "B·ªánh vi·ªán Ph·ª• s·∫£n - Nhi ƒê√† N·∫µng"
  ],
  "H·∫£i Ph√≤ng": [
    "B·ªánh vi·ªán H·ªØu ngh·ªã Vi·ªát Ti·ªáp",
    "B·ªánh vi·ªán Tr·∫ª em H·∫£i Ph√≤ng",
    "B·ªánh vi·ªán Ph·ª• s·∫£n H·∫£i Ph√≤ng"
  ],
  "C·∫ßn Th∆°": [
    "B·ªánh vi·ªán ƒêa khoa Trung ∆∞∆°ng C·∫ßn Th∆°",
    "B·ªánh vi·ªán Nhi ƒë·ªìng C·∫ßn Th∆°",
    "B·ªánh vi·ªán Ph·ª• s·∫£n C·∫ßn Th∆°"
  ],
  "B√¨nh D∆∞∆°ng": [
    "B·ªánh vi·ªán ƒêa khoa t·ªânh B√¨nh D∆∞∆°ng",
    "B·ªánh vi·ªán Qu·ªëc t·∫ø Becamex",
    "B·ªánh vi·ªán Ho√†n H·∫£o"
  ],
  "ƒê·ªìng Nai": [
    "B·ªánh vi·ªán ƒêa khoa ƒê·ªìng Nai",
    "B·ªánh vi·ªán Nhi ƒê·ªìng Nai",
    "B·ªánh vi·ªán Th·ªëng Nh·∫•t ƒê·ªìng Nai"
  ],
  "Ngh·ªá An": [
    "B·ªánh vi·ªán H·ªØu ngh·ªã ƒêa khoa Ngh·ªá An",
    "B·ªánh vi·ªán S·∫£n Nhi Ngh·ªá An",
    "B·ªánh vi·ªán 115 Ngh·ªá An"
  ],
  "Thanh H√≥a": [
    "B·ªánh vi·ªán ƒêa khoa t·ªânh Thanh H√≥a",
    "B·ªánh vi·ªán Nhi Thanh H√≥a",
    "B·ªánh vi·ªán Ph·ª• s·∫£n Thanh H√≥a"
  ],
  "Th·ª´a Thi√™n Hu·∫ø": [
    "B·ªánh vi·ªán Trung ∆∞∆°ng Hu·∫ø",
    "B·ªánh vi·ªán Tr∆∞·ªùng ƒê·∫°i h·ªçc Y D∆∞·ª£c Hu·∫ø",
    "B·ªánh vi·ªán Qu·ªëc t·∫ø Hu·∫ø"
  ]
};

function AppFilter({ onSearch }) {
  const [workplace, setWorkplace] = useState('');
  const [specialty, setSpecialty] = useState('');
  const [city, setCity] = useState('');
  const [sort, setSort] = useState('M·ªõi nh·∫•t');
  const [open, setOpen] = useState(false);
  const [showAlert, setShowAlert] = useState(false);
  const { user } = useAuth();
  const { goToLogin } = useNavigation();

  const handleCreatePost = (formData) => {
    console.log('üì® D·ªØ li·ªáu b√†i vi·∫øt:', formData);
    setOpen(false);
  };

  const handleSearch = () => {
    const filters = {
      city,
      sort,
    };

    // ‚úÖ chuy√™n khoa
    if (specialty && specialty !== "T·∫•t c·∫£") {
      filters.tags = [specialty];
    } else {
      filters.tags = [];
    }

    // ‚úÖ n∆°i l√†m vi·ªác
    if (workplace && workplace !== "T·∫•t c·∫£") {
      filters.workplace = workplace;
    }

    console.log(filters);

    if (typeof onSearch === 'function') {
      onSearch(filters);
    }
  };

  const handleCreateClick = () => {
    if (!user) {
      setShowAlert(true);
      setTimeout(() => {
        goToLogin(); // ‚úÖ Chuy·ªÉn h∆∞·ªõng sau c·∫£nh b√°o
      }, 1500);
    } else {
      setOpen(true);
    }
  };

  const selectStyle = {
    minWidth: 160,
    '& label': {
      color: '#FE5E7E',
    },
    '& label.Mui-focused': {
      color: '#FE5E7E',
    },
    '& .MuiOutlinedInput-root': {
      borderRadius: 2,
      '& fieldset': {
        borderColor: '#E0E0E0',
      },
      '&:hover fieldset': {
        borderColor: '#FE5E7E',
      },
      '&.Mui-focused fieldset': {
        borderColor: '#FE5E7E',
      },
    },
    '& .MuiSvgIcon-root': {
      color: '#FE5E7E',
    },
  };

  return (
    <Box
      sx={{
        width: '100%',
        maxWidth: 800,
        mx: 'auto',
        mt: 2,
        px: 2,
        py: 1,
        display: 'flex',
        flexWrap: 'wrap',
        gap: 1.5,
        alignItems: 'center',
        justifyContent: 'center',
      }}
    >
      <FormControl size="small" sx={selectStyle}>
        <InputLabel>Chuy√™n khoa</InputLabel>
        <Select
          value={specialty || ''}
          onChange={(e) => setSpecialty(e.target.value)}
          input={<OutlinedInput label="Chuy√™n khoa" />}
          startAdornment={
            <InputAdornment position="start">
              <MedicalServices sx={{ fontSize: 18, color: '#FE5E7E' }} />
            </InputAdornment>
          }
        >
          {specialties.map((s, i) => (
            <MenuItem key={i} value={s}>
              {s}
            </MenuItem>
          ))}
        </Select>
      </FormControl>
      <FormControl size="small" sx={selectStyle}>
        <InputLabel>T·ªânh/Th√†nh</InputLabel>
        <Select
          value={city}
          label="T·ªânh/Th√†nh"
          onChange={(e) => setCity(e.target.value)}
          startAdornment={
            <InputAdornment position="start">
              <LocationOn sx={{ fontSize: 18, color: '#FE5E7E' }} />
            </InputAdornment>
          }
        >
          {cities.map((c, i) => (
            <MenuItem key={i} value={c}>
              {c}
            </MenuItem>
          ))}
        </Select>
      </FormControl>
      <FormControl size="small" sx={selectStyle}>
        <InputLabel>N∆°i l√†m vi·ªác</InputLabel>
        <Select
          value={workplace}
          label="N∆°i l√†m vi·ªác"
          onChange={(e) => setWorkplace(e.target.value)}
          startAdornment={
            <InputAdornment position="start">
              <LocalHospital sx={{ fontSize: 18, color: '#FE5E7E' }} />
            </InputAdornment>
          }
        >
          <MenuItem value="T·∫•t c·∫£">T·∫•t c·∫£</MenuItem>
          {city && city !== "T·∫•t c·∫£" && WORKPLACES_BY_CITY[city]?.map((w, i) => (
            <MenuItem key={i} value={w}>
              {w}
            </MenuItem>
          ))}
        </Select>
      </FormControl>

      <FormControl size="small" sx={selectStyle}>
        <InputLabel>S·∫Øp x·∫øp</InputLabel>
        <Select
          value={sort}
          label="S·∫Øp x·∫øp"
          onChange={(e) => setSort(e.target.value)}
          startAdornment={
            <InputAdornment position="start">
              <Sort sx={{ fontSize: 18, color: '#FE5E7E' }} />
            </InputAdornment>
          }
        >
          {sortOptions.map((s, i) => (
            <MenuItem key={i} value={s}>
              {s}
            </MenuItem>
          ))}
        </Select>
      </FormControl>

      <Stack direction="row" spacing={1}>
        <Button
          variant="contained"
          size="small"
          onClick={handleSearch}
          startIcon={<Search />}
          sx={{
            textTransform: 'none',
            background: '#FE5E7E',
            '&:hover': { background: '#E24C6A' },
            px: 2,
            borderRadius: 2,
          }}
        >
          L·ªçc
        </Button>
        <Button
          variant="outlined"
          onClick={handleCreateClick}
          size="small"
          startIcon={<Add />}
          sx={{
            textTransform: 'none',
            color: '#FE5E7E',
            borderColor: '#FE5E7E',
            '&:hover': {
              borderColor: '#E24C6A',
              background: '#FFF0F3',
            },
            px: 2,
            borderRadius: 2,
          }}
        >
          T·∫°o b√†i
        </Button>
      </Stack>

      <CreatePostModel
        open={open}
        onClose={() => setOpen(false)}
        onSubmit={handleCreatePost}
      />

      {/* ‚úÖ Snackbar warning */}
      <Snackbar
        open={showAlert}
        autoHideDuration={3000}
        onClose={() => setShowAlert(false)}
        anchorOrigin={{ vertical: 'top', horizontal: 'center' }}
      >
        <Alert onClose={() => setShowAlert(false)} severity="warning" sx={{ width: '100%' }}>
          B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p ƒë·ªÉ ƒëƒÉng b√†i vi·∫øt!
        </Alert>
      </Snackbar>
    </Box>
  );
}

export default AppFilter;
